import { fail, redirect } from '@sveltejs/kit';

/* ---------- helpers ---------- */

const MAIL_TEST  = String(process.env.MAIL_TEST ?? '0') === '1';
const MAIL_DEBUG = String(process.env.MAIL_DEBUG ?? process.env.SMTP_LOG ?? '0') === '1';

const hasRealSMTP = () =>
  Boolean(process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS);

const looksLikeEmail = (v = '') => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v);

const escapeHtml = (s = '') =>
  s.replaceAll('&', '&amp;')
   .replaceAll('<', '&lt;')
   .replaceAll('>', '&gt;')
   .replaceAll('"', '&quot;')
   .replaceAll("'", '&#39;');

const splitAddresses = (s = '') =>
  String(s)
    .split(/[,;]+/)
    .map((x) => x.trim())
    .filter(Boolean);

// ‚Üê‚Äî‚Äî‚Äî NEW: helper to detect redirects ‚Äî‚Äî‚Äî‚Üí
const isRedirect = (e) =>
  e && typeof e === 'object' && 'status' in e && 'location' in e;

async function makeTransport(nodemailer) {
  if (hasRealSMTP() && !MAIL_TEST) {
    const isSecure =
      String(process.env.SMTP_SECURE ?? 'false') === 'true' ||
      Number(process.env.SMTP_PORT) === 465;

    const requireTLSEnv = String(process.env.SMTP_REQUIRE_TLS ?? 'true') === 'true';
    const rejectUnauthorized =
      String(process.env.SMTP_TLS_REJECT_UNAUTHORIZED ?? 'true') === 'true';

    const transport = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT ?? (isSecure ? 465 : 587)),
      secure: isSecure,                        // 465 = implicit TLS; 587/25 = STARTTLS
      requireTLS: !isSecure && requireTLSEnv,  // force STARTTLS on 587/25
      auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS },
      tls: { minVersion: 'TLSv1.2', rejectUnauthorized },
      greetingTimeout: 20_000,
      socketTimeout: 30_000,
      logger: MAIL_DEBUG,
      debug: MAIL_DEBUG
    });

    await transport.verify();
    return { transport, mode: 'smtp' };
  }

  // Ethereal (test inbox)
  const testAccount = await nodemailer.createTestAccount();
  const transport = nodemailer.createTransport({
    host: testAccount.smtp.host,
    port: testAccount.smtp.port,
    secure: testAccount.smtp.secure,
    auth: { user: testAccount.user, pass: testAccount.pass },
    logger: MAIL_DEBUG,
    debug: MAIL_DEBUG
  });
  return { transport, mode: 'ethereal' };
}

/* ---------- action handler ---------- */

async function handleSubmit({ request }) {
  const data = await request.formData();

  // Honeypot
  if (data.get('fax')) return { ok: true };

  const name     = data.get('name')?.toString().trim() ?? '';
  const email    = data.get('email')?.toString().trim() ?? '';
  const company  = data.get('company')?.toString().trim() ?? '';
  const phone    = data.get('phone')?.toString().trim() ?? '';
  const subject  = data.get('subject')?.toString().trim() || 'Website contact';
  const interest = data.get('interest')?.toString().trim() ?? '';
  const message  = data.get('message')?.toString().trim() ?? '';

  if (!name || !email || !message) {
    return fail(400, { ok: false, error: 'Missing required fields' });
  }
  if (!looksLikeEmail(email)) {
    return fail(400, { ok: false, error: 'Please enter a valid email address.' });
  }

  const plain = [
    `From: ${name} <${email}>`,
    company ? `Company: ${company}` : `Company: ‚Äî`,
    phone   ? `Phone: ${phone}`     : `Phone: ‚Äî`,
    interest? `Interest: ${interest}`: `Interest: ‚Äî`,
    `Subject: ${subject}`,
    '',
    message
  ].join('\n');

  const html = `
    <p><b>From:</b> ${escapeHtml(name)} &lt;${escapeHtml(email)}&gt;</p>
    <p><b>Company:</b> ${company ? escapeHtml(company) : '‚Äî'}</p>
    <p><b>Phone:</b> ${phone ? escapeHtml(phone) : '‚Äî'}</p>
    <p><b>Interest:</b> ${interest ? escapeHtml(interest) : '‚Äî'}</p>
    <p><b>Subject:</b> ${escapeHtml(subject)}</p>
    <hr>
    <p>${escapeHtml(message).replace(/\n/g, '<br>')}</p>
    <hr>
    <p style="color:#64748b;font-size:12px">
      Submitted via maramed.com/contact ‚Ä¢ This message was generated by the website contact form.
    </p>
  `;

  const msgRef = `MSG-${Date.now().toString(36).toUpperCase()}`;

  try {
    const nm = await import('nodemailer');
    const nodemailer = nm.default ?? nm;

    const { transport, mode } = await makeTransport(nodemailer);

    const fromAddr = process.env.SMTP_FROM || process.env.SMTP_USER || 'no-reply@example.com';
    const toList   = splitAddresses(process.env.CONTACT_TO  || 'custsupport@maramed.com');
    const ccList   = splitAddresses(process.env.CONTACT_CC  || '');
    const bccList  = splitAddresses(process.env.CONTACT_BCC || '');

    const info = await transport.sendMail({
      from: `"Website Form" <${fromAddr}>`,
      envelope: { from: fromAddr, to: [...toList, ...ccList, ...bccList] },
      to:  toList,
      ...(ccList.length  ? { cc:  ccList }  : {}),
      ...(bccList.length ? { bcc: bccList } : {}),
      subject: subject.startsWith('Website contact')
        ? `${subject} (${msgRef})`
        : `Website contact ‚Äî ${subject} (${msgRef})`,
      html,
      text: plain,
      replyTo: `${name} <${email}>`,
      headers: {
        'X-Website-Form': 'maramed.com',
        'X-Form-Page': '/contact',
        'X-Message-Ref': msgRef
      }
    });

    const nmPreview = mode === 'ethereal' ? nodemailer.getTestMessageUrl(info) : undefined;
    if (nmPreview) console.log('üìß Ethereal preview:', nmPreview);

    // success ‚Üí redirect to thank-you page (let it bubble!)
    throw redirect(303, `/contact/thank-you?ref=${encodeURIComponent(msgRef)}`);

  } catch (err) {
    // ‚Üê‚Äî‚Äî‚Äî LET REDIRECTS PASS THROUGH ‚Äî‚Äî‚Äî‚Üí
    if (isRedirect(err)) throw err;

    const msg = String(err?.response || err?.message || '');
    if (err?.code === 'EAUTH' || /Encryption required/i.test(msg)) {
      console.error('Auth/TLS failed for SMTP (check port/TLS settings).', err);
      return fail(502, { ok: false, error: 'Email server requires TLS/auth configuration.' });
    }
    if (/ECONNECTION|ETIMEDOUT|ENOTFOUND/.test(err?.code || '')) {
      console.error('SMTP connection failed:', err);
      return fail(502, { ok: false, error: 'Unable to reach email server.' });
    }
    console.error('Mail send failed:', err);
    return fail(500, { ok: false, error: 'Email service not configured' });
  }
}

/* ---------- named actions ONLY ---------- */
export const actions = {
  send: handleSubmit
};
